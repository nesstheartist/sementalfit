{"ast":null,"code":"import { collection, addDoc, getDocs, doc, getDoc, updateDoc, query, where } from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Funciones para usuarios\nexport const createUser = async userData => {\n  try {\n    const docRef = await addDoc(collection(db, \"users\"), {\n      ...userData,\n      level: 1,\n      xp: 0,\n      createdAt: new Date(),\n      lastLogin: new Date()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error(\"Error al crear usuario:\", error);\n    throw error;\n  }\n};\nexport const getUser = async userId => {\n  try {\n    const docRef = doc(db, \"users\", userId);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) {\n      return {\n        id: docSnap.id,\n        ...docSnap.data()\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error al obtener usuario:\", error);\n    throw error;\n  }\n};\n\n// Funciones para rutinas\nexport const saveWorkout = async (userId, workoutData) => {\n  try {\n    const docRef = await addDoc(collection(db, \"workouts\"), {\n      userId,\n      ...workoutData,\n      completedAt: new Date()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error(\"Error al guardar rutina:\", error);\n    throw error;\n  }\n};\nexport const getUserWorkouts = async userId => {\n  try {\n    const q = query(collection(db, \"workouts\"), where(\"userId\", \"==\", userId));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error(\"Error al obtener rutinas:\", error);\n    throw error;\n  }\n};\n\n// Funciones para progreso\nexport const updateProgress = async (userId, progressData) => {\n  try {\n    const userRef = doc(db, \"users\", userId);\n    await updateDoc(userRef, {\n      xp: progressData.xp,\n      level: progressData.level,\n      lastUpdated: new Date()\n    });\n  } catch (error) {\n    console.error(\"Error al actualizar progreso:\", error);\n    throw error;\n  }\n};\n\n// Función para obtener todos los usuarios\nexport const getUsers = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'users'));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error(\"Error al obtener usuarios:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","doc","getDoc","updateDoc","query","where","db","createUser","userData","docRef","level","xp","createdAt","Date","lastLogin","id","error","console","getUser","userId","docSnap","exists","data","saveWorkout","workoutData","completedAt","getUserWorkouts","q","querySnapshot","docs","map","updateProgress","progressData","userRef","lastUpdated","getUsers"],"sources":["C:/Users/nessc/AndroidStudioProjects/sementalfit/sementalfit2/src/services/database.js"],"sourcesContent":["import { \r\n    collection, \r\n    addDoc, \r\n    getDocs, \r\n    doc, \r\n    getDoc, \r\n    updateDoc,\r\n    query,\r\n    where\r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\n// Funciones para usuarios\r\nexport const createUser = async (userData) => {\r\n    try {\r\n        const docRef = await addDoc(collection(db, \"users\"), {\r\n            ...userData,\r\n            level: 1,\r\n            xp: 0,\r\n            createdAt: new Date(),\r\n            lastLogin: new Date()\r\n        });\r\n        return docRef.id;\r\n    } catch (error) {\r\n        console.error(\"Error al crear usuario:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getUser = async (userId) => {\r\n    try {\r\n        const docRef = doc(db, \"users\", userId);\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            return { id: docSnap.id, ...docSnap.data() };\r\n        }\r\n        return null;\r\n    } catch (error) {\r\n        console.error(\"Error al obtener usuario:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Funciones para rutinas\r\nexport const saveWorkout = async (userId, workoutData) => {\r\n    try {\r\n        const docRef = await addDoc(collection(db, \"workouts\"), {\r\n            userId,\r\n            ...workoutData,\r\n            completedAt: new Date()\r\n        });\r\n        return docRef.id;\r\n    } catch (error) {\r\n        console.error(\"Error al guardar rutina:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getUserWorkouts = async (userId) => {\r\n    try {\r\n        const q = query(collection(db, \"workouts\"), where(\"userId\", \"==\", userId));\r\n        const querySnapshot = await getDocs(q);\r\n        return querySnapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            ...doc.data()\r\n        }));\r\n    } catch (error) {\r\n        console.error(\"Error al obtener rutinas:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Funciones para progreso\r\nexport const updateProgress = async (userId, progressData) => {\r\n    try {\r\n        const userRef = doc(db, \"users\", userId);\r\n        await updateDoc(userRef, {\r\n            xp: progressData.xp,\r\n            level: progressData.level,\r\n            lastUpdated: new Date()\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error al actualizar progreso:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Función para obtener todos los usuarios\r\nexport const getUsers = async () => {\r\n    try {\r\n        const querySnapshot = await getDocs(collection(db, 'users'));\r\n        return querySnapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            ...doc.data()\r\n        }));\r\n    } catch (error) {\r\n        console.error(\"Error al obtener usuarios:\", error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}