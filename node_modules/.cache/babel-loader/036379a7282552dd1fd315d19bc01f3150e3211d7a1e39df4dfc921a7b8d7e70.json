{"ast":null,"code":"// Importar Firebase usando la versión compat\nimport { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  authDomain: \"sementalfit.firebaseapp.com\",\n  projectId: \"sementalfit\",\n  storageBucket: \"sementalfit.appspot.com\",\n  messagingSenderId: \"XXXXXXXXXXXX\",\n  appId: \"1:XXXXXXXXXXXX:web:XXXXXXXXXXXXXXXX\"\n};\n\n// Inicializar Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nexport const getUser = async userId => {\n  try {\n    const userDoc = await db.collection('users').doc(userId).get();\n    return userDoc.exists ? userDoc.data() : null;\n  } catch (error) {\n    console.error('Error getting user:', error);\n    return null;\n  }\n};\nexport const getUserRoutine = async userId => {\n  try {\n    const routineDoc = await db.collection('routines').doc(userId).get();\n    return routineDoc.exists ? routineDoc.data() : {};\n  } catch (error) {\n    console.error('Error getting user routine:', error);\n    return {};\n  }\n};\nexport const saveUserRoutine = async (userId, routine) => {\n  try {\n    await db.collection('routines').doc(userId).set(routine);\n    return true;\n  } catch (error) {\n    console.error('Error saving user routine:', error);\n    return false;\n  }\n};\nexport const getAllExercises = async () => {\n  try {\n    const exercisesSnapshot = await db.collection('exercises').get();\n    return exercisesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Error getting exercises:', error);\n    return [];\n  }\n};\nexport { auth, db };","map":{"version":3,"names":["initializeApp","getAuth","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","db","getUser","userId","userDoc","collection","doc","get","exists","data","error","console","getUserRoutine","routineDoc","saveUserRoutine","routine","set","getAllExercises","exercisesSnapshot","docs","map","id"],"sources":["C:/Users/nessc/AndroidStudioProjects/sementalfit/sementalfit2/src/services/firebase.js"],"sourcesContent":["// Importar Firebase usando la versión compat\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\r\n    authDomain: \"sementalfit.firebaseapp.com\",\r\n    projectId: \"sementalfit\",\r\n    storageBucket: \"sementalfit.appspot.com\",\r\n    messagingSenderId: \"XXXXXXXXXXXX\",\r\n    appId: \"1:XXXXXXXXXXXX:web:XXXXXXXXXXXXXXXX\"\r\n};\r\n\r\n// Inicializar Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\n\r\nexport const getUser = async (userId) => {\r\n    try {\r\n        const userDoc = await db.collection('users').doc(userId).get();\r\n        return userDoc.exists ? userDoc.data() : null;\r\n    } catch (error) {\r\n        console.error('Error getting user:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const getUserRoutine = async (userId) => {\r\n    try {\r\n        const routineDoc = await db.collection('routines').doc(userId).get();\r\n        return routineDoc.exists ? routineDoc.data() : {};\r\n    } catch (error) {\r\n        console.error('Error getting user routine:', error);\r\n        return {};\r\n    }\r\n};\r\n\r\nexport const saveUserRoutine = async (userId, routine) => {\r\n    try {\r\n        await db.collection('routines').doc(userId).set(routine);\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error saving user routine:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const getAllExercises = async () => {\r\n    try {\r\n        const exercisesSnapshot = await db.collection('exercises').get();\r\n        return exercisesSnapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            ...doc.data()\r\n        }));\r\n    } catch (error) {\r\n        console.error('Error getting exercises:', error);\r\n        return [];\r\n    }\r\n};\r\n\r\nexport { auth, db }; "],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,6BAA6B;EACzCC,SAAS,EAAE,aAAa;EACxBC,aAAa,EAAE,yBAAyB;EACxCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGV,aAAa,CAACG,cAAc,CAAC;AACzC,MAAMQ,IAAI,GAAGV,OAAO,CAACS,GAAG,CAAC;AACzB,MAAME,EAAE,GAAGV,YAAY,CAACQ,GAAG,CAAC;AAE5B,OAAO,MAAMG,OAAO,GAAG,MAAOC,MAAM,IAAK;EACrC,IAAI;IACA,MAAMC,OAAO,GAAG,MAAMH,EAAE,CAACI,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACH,MAAM,CAAC,CAACI,GAAG,CAAC,CAAC;IAC9D,OAAOH,OAAO,CAACI,MAAM,GAAGJ,OAAO,CAACK,IAAI,CAAC,CAAC,GAAG,IAAI;EACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAME,cAAc,GAAG,MAAOT,MAAM,IAAK;EAC5C,IAAI;IACA,MAAMU,UAAU,GAAG,MAAMZ,EAAE,CAACI,UAAU,CAAC,UAAU,CAAC,CAACC,GAAG,CAACH,MAAM,CAAC,CAACI,GAAG,CAAC,CAAC;IACpE,OAAOM,UAAU,CAACL,MAAM,GAAGK,UAAU,CAACJ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,CAAC,CAAC;EACb;AACJ,CAAC;AAED,OAAO,MAAMI,eAAe,GAAG,MAAAA,CAAOX,MAAM,EAAEY,OAAO,KAAK;EACtD,IAAI;IACA,MAAMd,EAAE,CAACI,UAAU,CAAC,UAAU,CAAC,CAACC,GAAG,CAACH,MAAM,CAAC,CAACa,GAAG,CAACD,OAAO,CAAC;IACxD,OAAO,IAAI;EACf,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,OAAO,MAAMO,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMC,iBAAiB,GAAG,MAAMjB,EAAE,CAACI,UAAU,CAAC,WAAW,CAAC,CAACE,GAAG,CAAC,CAAC;IAChE,OAAOW,iBAAiB,CAACC,IAAI,CAACC,GAAG,CAACd,GAAG,KAAK;MACtCe,EAAE,EAAEf,GAAG,CAACe,EAAE;MACV,GAAGf,GAAG,CAACG,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,EAAE;EACb;AACJ,CAAC;AAED,SAASV,IAAI,EAAEC,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}