{"ast":null,"code":"import { collection, addDoc, setDoc, doc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Función para inicializar las categorías de productos\nexport const initializeProductCategories = async () => {\n  const categories = [{\n    name: 'Suplementos',\n    description: 'Suplementos nutricionales y proteínas',\n    imageUrl: 'https://example.com/supplements.jpg'\n  }, {\n    name: 'Ropa Deportiva',\n    description: 'Ropa y accesorios para entrenamiento',\n    imageUrl: 'https://example.com/clothing.jpg'\n  }, {\n    name: 'Equipamiento',\n    description: 'Equipamiento y accesorios para gimnasio',\n    imageUrl: 'https://example.com/equipment.jpg'\n  }];\n  try {\n    for (const category of categories) {\n      await addDoc(collection(db, 'productCategories'), {\n        ...category,\n        createdAt: serverTimestamp()\n      });\n    }\n    console.log('Categorías de productos inicializadas');\n  } catch (error) {\n    console.error('Error al inicializar categorías:', error);\n  }\n};\n\n// Función para inicializar productos de ejemplo\nexport const initializeProducts = async () => {\n  const products = [{\n    name: 'Proteína Whey Gold Standard',\n    description: 'Proteína de suero de leche de alta calidad',\n    price: 49.99,\n    imageUrl: 'https://example.com/whey.jpg',\n    category: 'Suplementos',\n    stock: 100\n  }, {\n    name: 'Camiseta Deportiva Premium',\n    description: 'Camiseta transpirable para entrenamiento',\n    price: 29.99,\n    imageUrl: 'https://example.com/tshirt.jpg',\n    category: 'Ropa Deportiva',\n    stock: 50\n  }, {\n    name: 'Set de Mancuernas',\n    description: 'Set de mancuernas ajustables',\n    price: 79.99,\n    imageUrl: 'https://example.com/dumbbells.jpg',\n    category: 'Equipamiento',\n    stock: 30\n  }];\n  try {\n    for (const product of products) {\n      await addDoc(collection(db, 'products'), {\n        ...product,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n    }\n    console.log('Productos inicializados');\n  } catch (error) {\n    console.error('Error al inicializar productos:', error);\n  }\n};\n\n// Función para inicializar todo\nexport const initializeAll = async () => {\n  try {\n    await initializeProductCategories();\n    await initializeProducts();\n    console.log('Todas las colecciones han sido inicializadas');\n  } catch (error) {\n    console.error('Error al inicializar colecciones:', error);\n  }\n};","map":{"version":3,"names":["collection","addDoc","setDoc","doc","serverTimestamp","db","initializeProductCategories","categories","name","description","imageUrl","category","createdAt","console","log","error","initializeProducts","products","price","stock","product","updatedAt","initializeAll"],"sources":["C:/Users/nessc/Semental fit ultima/sementalfit2/src/services/initializeCollections.js"],"sourcesContent":["import { \r\n    collection, \r\n    addDoc, \r\n    setDoc, \r\n    doc,\r\n    serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\n// Función para inicializar las categorías de productos\r\nexport const initializeProductCategories = async () => {\r\n    const categories = [\r\n        {\r\n            name: 'Suplementos',\r\n            description: 'Suplementos nutricionales y proteínas',\r\n            imageUrl: 'https://example.com/supplements.jpg'\r\n        },\r\n        {\r\n            name: 'Ropa Deportiva',\r\n            description: 'Ropa y accesorios para entrenamiento',\r\n            imageUrl: 'https://example.com/clothing.jpg'\r\n        },\r\n        {\r\n            name: 'Equipamiento',\r\n            description: 'Equipamiento y accesorios para gimnasio',\r\n            imageUrl: 'https://example.com/equipment.jpg'\r\n        }\r\n    ];\r\n\r\n    try {\r\n        for (const category of categories) {\r\n            await addDoc(collection(db, 'productCategories'), {\r\n                ...category,\r\n                createdAt: serverTimestamp()\r\n            });\r\n        }\r\n        console.log('Categorías de productos inicializadas');\r\n    } catch (error) {\r\n        console.error('Error al inicializar categorías:', error);\r\n    }\r\n};\r\n\r\n// Función para inicializar productos de ejemplo\r\nexport const initializeProducts = async () => {\r\n    const products = [\r\n        {\r\n            name: 'Proteína Whey Gold Standard',\r\n            description: 'Proteína de suero de leche de alta calidad',\r\n            price: 49.99,\r\n            imageUrl: 'https://example.com/whey.jpg',\r\n            category: 'Suplementos',\r\n            stock: 100\r\n        },\r\n        {\r\n            name: 'Camiseta Deportiva Premium',\r\n            description: 'Camiseta transpirable para entrenamiento',\r\n            price: 29.99,\r\n            imageUrl: 'https://example.com/tshirt.jpg',\r\n            category: 'Ropa Deportiva',\r\n            stock: 50\r\n        },\r\n        {\r\n            name: 'Set de Mancuernas',\r\n            description: 'Set de mancuernas ajustables',\r\n            price: 79.99,\r\n            imageUrl: 'https://example.com/dumbbells.jpg',\r\n            category: 'Equipamiento',\r\n            stock: 30\r\n        }\r\n    ];\r\n\r\n    try {\r\n        for (const product of products) {\r\n            await addDoc(collection(db, 'products'), {\r\n                ...product,\r\n                createdAt: serverTimestamp(),\r\n                updatedAt: serverTimestamp()\r\n            });\r\n        }\r\n        console.log('Productos inicializados');\r\n    } catch (error) {\r\n        console.error('Error al inicializar productos:', error);\r\n    }\r\n};\r\n\r\n// Función para inicializar todo\r\nexport const initializeAll = async () => {\r\n    try {\r\n        await initializeProductCategories();\r\n        await initializeProducts();\r\n        console.log('Todas las colecciones han sido inicializadas');\r\n    } catch (error) {\r\n        console.error('Error al inicializar colecciones:', error);\r\n    }\r\n}; "],"mappings":"AAAA,SACIA,UAAU,EACVC,MAAM,EACNC,MAAM,EACNC,GAAG,EACHC,eAAe,QACZ,oBAAoB;AAC3B,SAASC,EAAE,QAAQ,aAAa;;AAEhC;AACA,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAA,KAAY;EACnD,MAAMC,UAAU,GAAG,CACf;IACIC,IAAI,EAAE,aAAa;IACnBC,WAAW,EAAE,uCAAuC;IACpDC,QAAQ,EAAE;EACd,CAAC,EACD;IACIF,IAAI,EAAE,gBAAgB;IACtBC,WAAW,EAAE,sCAAsC;IACnDC,QAAQ,EAAE;EACd,CAAC,EACD;IACIF,IAAI,EAAE,cAAc;IACpBC,WAAW,EAAE,yCAAyC;IACtDC,QAAQ,EAAE;EACd,CAAC,CACJ;EAED,IAAI;IACA,KAAK,MAAMC,QAAQ,IAAIJ,UAAU,EAAE;MAC/B,MAAMN,MAAM,CAACD,UAAU,CAACK,EAAE,EAAE,mBAAmB,CAAC,EAAE;QAC9C,GAAGM,QAAQ;QACXC,SAAS,EAAER,eAAe,CAAC;MAC/B,CAAC,CAAC;IACN;IACAS,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;EACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;EAC5D;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,QAAQ,GAAG,CACb;IACIT,IAAI,EAAE,6BAA6B;IACnCC,WAAW,EAAE,4CAA4C;IACzDS,KAAK,EAAE,KAAK;IACZR,QAAQ,EAAE,8BAA8B;IACxCC,QAAQ,EAAE,aAAa;IACvBQ,KAAK,EAAE;EACX,CAAC,EACD;IACIX,IAAI,EAAE,4BAA4B;IAClCC,WAAW,EAAE,0CAA0C;IACvDS,KAAK,EAAE,KAAK;IACZR,QAAQ,EAAE,gCAAgC;IAC1CC,QAAQ,EAAE,gBAAgB;IAC1BQ,KAAK,EAAE;EACX,CAAC,EACD;IACIX,IAAI,EAAE,mBAAmB;IACzBC,WAAW,EAAE,8BAA8B;IAC3CS,KAAK,EAAE,KAAK;IACZR,QAAQ,EAAE,mCAAmC;IAC7CC,QAAQ,EAAE,cAAc;IACxBQ,KAAK,EAAE;EACX,CAAC,CACJ;EAED,IAAI;IACA,KAAK,MAAMC,OAAO,IAAIH,QAAQ,EAAE;MAC5B,MAAMhB,MAAM,CAACD,UAAU,CAACK,EAAE,EAAE,UAAU,CAAC,EAAE;QACrC,GAAGe,OAAO;QACVR,SAAS,EAAER,eAAe,CAAC,CAAC;QAC5BiB,SAAS,EAAEjB,eAAe,CAAC;MAC/B,CAAC,CAAC;IACN;IACAS,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC1C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EAC3D;AACJ,CAAC;;AAED;AACA,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACA,MAAMhB,2BAA2B,CAAC,CAAC;IACnC,MAAMU,kBAAkB,CAAC,CAAC;IAC1BH,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;EAC/D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;EAC7D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}